"""
Stage 2: –¥–µ–ª–∞–µ—Ç –∫–æ–º–º–∏—Ç –∏/–∏–ª–∏ push –≤–æ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ó–∞–ø—É—Å–∫:
    python -m release_tool.stage2 [--commit] [--push] [--dry-run]

--commit  —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º commit_message.txt
--push    –≤—ã–ø–æ–ª–Ω–∏—Ç—å git push
–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–ª–∞–≥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ --commit.
"""
from __future__ import annotations

import argparse
import pathlib
import sys

from .config import load_config
from .git_utils import commit_all, _push_repo, has_commits_to_push


def process_package(pkg_path: pathlib.Path, cfg: dict, push: bool, dry_run: bool = False) -> None:
    root = pathlib.Path.cwd()
    changes_dir = root / cfg.get("changes_output_dir", "release_tool/changes") / pkg_path.name
    msg_file = changes_dir / cfg["commit_message_filename"]
    if not msg_file.exists():
        print(f"[stage2]   {pkg_path.name}: —Ñ–∞–π–ª commit-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    message = msg_file.read_text(encoding="utf-8").strip()
    if not message:
        print(f"[stage2]   {pkg_path.name}: –ø—É—Å—Ç–æ–µ commit-—Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    commit_all(pkg_path, message, remote=cfg.get("git_remote", "origin"), push=push, dry_run=dry_run)
    print(f"[stage2]   ‚úÖ {pkg_path.name}: commit —Å–æ–∑–¥–∞–Ω{' –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' if push else ''}")


def run(argv: list[str] | None = None) -> None:
    cfg = load_config()

    parser = argparse.ArgumentParser(description="Stage 2: commit –∏/–∏–ª–∏ push –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø–∞–∫–µ—Ç–∞–º")
    parser.add_argument("--commit", action="store_true", help="—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º")
    parser.add_argument("--push", action="store_true", help="–≤—ã–ø–æ–ª–Ω–∏—Ç—å git push –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args(argv)

    if not args.commit and not args.push:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–≤–µ—Ä—à–∞–µ–º commit (–±–µ–∑ push)
        args.commit = True

    actions_descr = []
    if args.commit:
        actions_descr.append("–∫–æ–º–º–∏—Ç")
    if args.push:
        actions_descr.append("push")
    action = " –∏ ".join(actions_descr)
    print(f"[stage2] –í—ã–ø–æ–ª–Ω—è–µ–º {action} –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...")
    
    root = pathlib.Path.cwd()
    packages_dir = root / cfg["packages_dir"]
    if not packages_dir.is_dir():
        print(f"[stage2] –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {packages_dir}", file=sys.stderr)
        sys.exit(1)

    processed = 0
    for pkg in sorted(packages_dir.iterdir()):
        if not pkg.is_dir():
            continue
        print(f"[stage2] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç: {pkg.name}")
        # Commit (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω)
        if args.commit:
            process_package(pkg, cfg, push=False, dry_run=args.dry_run or cfg.get("dry_run", False))

        # Push (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω)
        if args.push:
            remote_name = cfg.get("git_remote", "origin")
            try:
                if has_commits_to_push(pkg, remote=remote_name):
                    _push_repo(pkg, remote_name)
                    print(f"[stage2]   ‚úÖ {pkg.name}: –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                else:
                    print(f"[stage2]   üì≠ {pkg.name}: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            except Exception as exc:  # noqa: BLE001
                print(f"[stage2]   ‚ùå {pkg.name}: push –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {exc}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        changes_dir = root / cfg.get("changes_output_dir", "release_tool/changes") / pkg.name
        msg_file = changes_dir / cfg["commit_message_filename"]
        if args.commit and msg_file.exists() and msg_file.read_text(encoding="utf-8").strip():
            processed += 1
    
    if processed == 0:
        print("[stage2] ‚úÖ –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ commit-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
    else:
        print(f"[stage2] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {processed}")


if __name__ == "__main__":
    run() 