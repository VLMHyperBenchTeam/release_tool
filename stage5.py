from __future__ import annotations

"""Stage 5: —Å—Ç–∞–≤–∏—Ç –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥ –Ω–∞ release-–∫–æ–º–º–∏—Ç.

–ó–∞–ø—É—Å–∫:
    python -m release_tool.stage5 [--push] [--dry-run]
"""

import argparse
import pathlib
import re
import sys
from typing import Optional

from .config import load_config
from .git_utils import _run_git, GitError


def _get_package_version(pyproject: pathlib.Path) -> str:
    pattern = re.compile(r"^\s*version\s*=\s*\"(?P<v>[^\"]+)\"")
    for line in pyproject.read_text(encoding="utf-8").splitlines():
        m = pattern.match(line)
        if m:
            return m.group("v")
    raise RuntimeError("version field not found")


def _tag_exists(repo: pathlib.Path, tag: str) -> bool:
    proc = _run_git(repo, ["tag", "-l", tag])
    return bool(proc.stdout.strip())


def _create_tag(repo: pathlib.Path, tag: str, message: str, push: bool, dry_run: bool) -> None:
    if dry_run:
        print(f"[stage5]   [dry-run] git -C {repo} tag -a {tag} -m \"{message.splitlines()[0]}‚Ä¶\"")
        if push:
            print(f"[stage5]   [dry-run] git -C {repo} push origin {tag}")
        return
    proc = _run_git(repo, ["tag", "-a", tag, "-m", message], capture=False)
    if proc.returncode != 0:
        raise GitError(proc.stderr)
    if push:
        proc = _run_git(repo, ["push", "origin", tag], capture=False)
        if proc.returncode != 0:
            raise GitError(proc.stderr)


def run(argv: list[str] | None = None) -> None:
    cfg = load_config()
    parser = argparse.ArgumentParser(description="Stage 5: create and push annotated tag")
    parser.add_argument("--push", action="store_true", help="git push —Ç–µ–≥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args(argv)

    root = pathlib.Path.cwd()
    packages_dir = root / cfg["packages_dir"]
    if not packages_dir.is_dir():
        print(f"[stage5] –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {packages_dir}", file=sys.stderr)
        sys.exit(1)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞–∫–µ—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö release_tool/changes/<pkg> —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    changes_root = root / cfg.get("changes_output_dir", "release_tool/changes")

    processed = 0
    for pkg in sorted(packages_dir.iterdir()):
        if not pkg.is_dir():
            continue

        pkg_changes_dir = changes_root / pkg.name
        if not pkg_changes_dir.exists():
            # –£ –ø–∞–∫–µ—Ç–∞ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–ª–∏–∑–µ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        pyproject = pkg / "pyproject.toml"
        if not pyproject.exists():
            continue

        version = _get_package_version(pyproject)
        tag_name = f"{cfg.get('tag_prefix', '')}{version}"
        print(f"[stage5] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç: {pkg.name} ‚Üí {tag_name}")
        if _tag_exists(pkg, tag_name):
            print(f"[stage5]   üü° —Ç–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ tag_message.txt, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        tag_msg_file = pkg_changes_dir / cfg["tag_message_filename"]
        custom_msg: str = ""
        if tag_msg_file.exists():
            custom_msg = tag_msg_file.read_text(encoding="utf-8").strip()

        if not custom_msg:
            proc = _run_git(pkg, ["log", "-1", "--pretty=%B"])
            custom_msg = proc.stdout.strip() or f"Release {tag_name}"

        commit_msg = custom_msg
        _create_tag(
            pkg,
            tag_name,
            commit_msg,
            push=args.push,
            dry_run=args.dry_run or cfg.get("dry_run", False),
        )
        print(f"[stage5]   ‚úÖ —Ç–µ–≥ —Å–æ–∑–¥–∞–Ω")
        processed += 1

    print(f"[stage5] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {processed}")


if __name__ == "__main__":
    run() 