"""Stage 2: –¥–µ–ª–∞–µ—Ç –∫–æ–º–º–∏—Ç –∏/–∏–ª–∏ push –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–∞—Ö.
–ü–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ `release_tool.stages.stage2`.
"""
from __future__ import annotations

import argparse
import pathlib
import sys

from ..config import load_config
from ..git_utils import _push_repo, commit_all, _get_current_branch
from ..status_analyzer import analyze_repo_status, RepoStatus

__all__ = ["run"]


def process_package(pkg_path: pathlib.Path, cfg: dict, push: bool, dry_run: bool = False) -> RepoStatus | None:
    """–°–æ–∑–¥–∞—ë—Ç commit –∏/–∏–ª–∏ push –¥–ª—è *pkg_path* –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π RepoStatus."""

    root = pathlib.Path.cwd()
    changes_dir = root / cfg.get("changes_output_dir", "release_tool/changes") / pkg_path.name
    msg_file = changes_dir / cfg["commit_message_filename"]
    if not msg_file.exists():
        print(f"[stage2]   {pkg_path.name}: —Ñ–∞–π–ª commit-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    message = msg_file.read_text(encoding="utf-8").strip()
    if not message:
        print(f"[stage2]   {pkg_path.name}: –ø—É—Å—Ç–æ–µ commit-—Å–æ–æ–±—â–µ–Ω–∏–µ")
        return None

    commit_all(pkg_path, message, remote=cfg.get("git_remote", "origin"), push=push, dry_run=dry_run)

    branch = _get_current_branch(pkg_path)
    repo_status = analyze_repo_status(pkg_path, branch, cfg.get("git_remote", "origin"))

    status_parts: list[str] = []
    if repo_status.ahead:
        status_parts.append(f"ahead:{repo_status.ahead}")
    if repo_status.behind:
        status_parts.append(f"behind:{repo_status.behind}")
    if repo_status.uncommitted:
        status_parts.append("uncommitted")

    status_str = ", ".join(status_parts) if status_parts else "ok"
    print(f"[stage2]   ‚úÖ {pkg_path.name}: commit —Å–æ–∑–¥–∞–Ω{' –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' if push else ''}; {status_str}")
    return repo_status


def run(argv: list[str] | None = None) -> None:
    cfg = load_config()

    parser = argparse.ArgumentParser(description="Stage 2: commit –∏/–∏–ª–∏ push –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø–∞–∫–µ—Ç–∞–º")
    parser.add_argument("--commit", action="store_true", help="—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º")
    parser.add_argument("--push", action="store_true", help="–≤—ã–ø–æ–ª–Ω–∏—Ç—å git push –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args(argv)

    if not args.commit and not args.push:
        args.commit = True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ commit

    actions_descr = [act for act, flag in (("–∫–æ–º–º–∏—Ç", args.commit), ("push", args.push)) if flag]
    print(f"[stage2] –í—ã–ø–æ–ª–Ω—è–µ–º {' –∏ '.join(actions_descr)} –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏‚Ä¶")

    root = pathlib.Path.cwd()
    packages_dir = root / cfg["packages_dir"]
    if not packages_dir.is_dir():
        print(f"[stage2] –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {packages_dir}", file=sys.stderr)
        sys.exit(1)

    processed = 0
    for pkg in sorted(packages_dir.iterdir()):
        if not pkg.is_dir():
            continue
        print(f"[stage2] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç: {pkg.name}")

        changes_root = root / cfg.get("changes_output_dir", "release_tool/changes")
        in_current_release = (changes_root / pkg.name).exists()

        if args.commit:
            process_package(pkg, cfg, push=False, dry_run=args.dry_run or cfg.get("dry_run", False))

        if args.push:
            if not in_current_release:
                print(f"[stage2]   ‚è© {pkg.name}: –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ª–∏–∑–µ ‚Äî push –ø—Ä–æ–ø—É—â–µ–Ω")
            else:
                remote_name = cfg.get("git_remote", "origin")
                try:
                    repo_status = analyze_repo_status(pkg, _get_current_branch(pkg), remote_name)
                    if repo_status.ahead:
                        _push_repo(pkg, remote_name)
                        print(f"[stage2]   ‚úÖ {pkg.name}: –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–æ—Å—Ç–∞–ª—Å—è behind:{repo_status.behind})")
                    else:
                        print(f"[stage2]   üì≠ {pkg.name}: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç (ahead:0)")
                except Exception as exc:  # noqa: BLE001
                    print(f"[stage2]   ‚ùå {pkg.name}: push –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {exc}")

        msg_file = (changes_root / pkg.name / cfg["commit_message_filename"])
        if args.commit and msg_file.exists() and msg_file.read_text(encoding="utf-8").strip():
            processed += 1

    if processed == 0:
        print("[stage2] ‚úÖ –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ commit-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
    else:
        print(f"[stage2] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {processed}")


if __name__ == "__main__":
    run() 