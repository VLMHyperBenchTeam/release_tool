"""Stage 4: bump –≤–µ—Ä—Å–∏–∏, —Å–æ–∑–¥–∞—ë—Ç —Ç–µ–≥ –∏ (–æ–ø—Ü.) –ø—É—à–∏—Ç.

–ó–∞–ø—É—Å–∫:
    python -m release_tool.stage4 [--dry-run] [--bump patch|minor|major|dev] [--push]
"""
from __future__ import annotations

import argparse
import pathlib
import re
import sys
from typing import Optional

from packaging.version import Version, InvalidVersion  # type: ignore

from .config import load_config
from .git_utils import commit_and_tag, _run_git, GitError, get_last_tag

# regexes
_SEMVER_RE = re.compile(r"^(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)$")
_DEV_RE = re.compile(r"^(?P<prefix>.*?)(?P<dev>\.dev(?P<num>\d+))?$")


def bump_dev(version_str: str) -> str:
    try:
        _ = Version(version_str)
    except InvalidVersion as exc:
        raise ValueError(f"Invalid version: {version_str}") from exc
    m = _DEV_RE.match(version_str)
    if not m:
        raise ValueError("bad version")
    prefix = m.group("prefix")
    num = int(m.group("num") or 0) + 1
    return f"{prefix}.dev{num}"


def bump_semver(version_str: str, part: str) -> str:
    """–ü–æ–≤—ã—à–∞–µ—Ç *release*-—á–∞—Å—Ç—å –≤–µ—Ä—Å–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å—É—Ñ—Ñ–∏–∫—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, .devN).

    –ü—Ä–∏ bump-–µ *patch/minor/major* —Å—É—Ñ—Ñ–∏–∫—Å (.devN, .rc, –∏ –¥—Ä.) –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, —Ç.–µ.
    —Å—Ç—Ä–æ–∫–∞ ``0.0.1.dev3`` —Å ``part="patch"`` –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ ``0.0.2``.

    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ ``packaging.version.Version``: –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç PEP 440-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ
    –≤–µ—Ä—Å–∏–∏ (–≤ —Ç. —á. c –¥–µ–≤- –∏ pre-—Ä–µ–ª–∏–∑–∞–º–∏). Release-–∫–æ—Ä—Ç–µ–∂ ``v.release`` –≤—Å–µ–≥–¥–∞
    —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç 1 –¥–æ 3 —á–∏—Å–µ–ª (major, minor, patch). –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
    """

    try:
        v = Version(version_str)
    except InvalidVersion as exc:
        raise ValueError(f"Invalid version: {version_str}") from exc

    # ``v.release`` ‚Äî tuple(int, ‚Ä¶) –¥–ª–∏–Ω–æ–π 1-3. –î–æ–ø–æ–ª–Ω–∏–º –¥–æ 3.
    release = list(v.release) + [0, 0]
    major, minor, patch = release[:3]

    # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –≤—ã–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π dev-—Ä–µ–ª–∏–∑ ‚Üí –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å .devN
    if v.dev is not None and part == "patch":
        return f"{major}.{minor}.{patch}"

    if part == "patch":
        patch += 1
    elif part == "minor":
        minor += 1
        patch = 0
    elif part == "major":
        major += 1
        minor = patch = 0
    else:
        raise ValueError("unknown part")

    return f"{major}.{minor}.{patch}"


def bump_version(version_str: str, part: str) -> str:
    if part == "dev":
        return bump_dev(version_str)
    return bump_semver(version_str, part)


def update_version_in_pyproject(pyproject: pathlib.Path, new_version: str) -> None:
    lines = pyproject.read_text(encoding="utf-8").splitlines()
    for i, line in enumerate(lines):
        if line.strip().startswith("version") and "=" in line:
            lines[i] = f"version = \"{new_version}\""
            break
    else:
        raise RuntimeError("version field not found")
    pyproject.write_text("\n".join(lines) + "\n", encoding="utf-8")


def _clean_workspace_sources(pyproject: pathlib.Path, dry_run: bool = False) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ [tool.uv.sources] —Å–æ —Å—Å—ã–ª–∫–æ–π ``workspace = true``.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω.
    """

    original_lines = pyproject.read_text(encoding="utf-8").splitlines()
    new_lines: list[str] = []
    in_sources_block = False
    changed = False

    for line in original_lines:
        stripped = line.lstrip()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ —Å–µ–∫—Ü–∏–∏ [tool.uv.sources]
        if stripped.startswith("[tool.uv.sources]"):
            in_sources_block = True
            new_lines.append(line)
            continue

        if in_sources_block and stripped.startswith("[") and not stripped.startswith("[tool.uv.sources]"):
            # –í—ã—à–ª–∏ –∏–∑ –±–ª–æ–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            in_sources_block = False

        if in_sources_block and "workspace" in stripped:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ { workspace = true }
            changed = True
            continue  # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É

        new_lines.append(line)

    if changed and not dry_run:
        pyproject.write_text("\n".join(new_lines) + "\n", encoding="utf-8")

    return changed


def _update_tag_in_prod_pyproject(prod_pyproject: pathlib.Path, project_name: str, tag_name: str, dry_run: bool = False) -> bool:
    """–ú–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ ``tag = "‚Ä¶"`` –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤ prod/pyproject.toml.

    Parameters
    ----------
    prod_pyproject : pathlib.Path
        –ü—É—Ç—å –∫ prod/pyproject.toml.
    project_name : str
        –ò–º—è –ø–∞–∫–µ—Ç–∞ —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "bench-utils").
    tag_name : str
        –ù–æ–≤—ã–π —Ç–µ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "v1.2.3").
    dry_run : bool, default False
        –ï—Å–ª–∏ True, —Ñ–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –±—ã–ª–æ –±—ã –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.

    Returns
    -------
    bool
        True, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω.
    """

    if not prod_pyproject.exists():
        # –ù–µ—Ç prod-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return False

    pattern = re.compile(rf"^(\s*{re.escape(project_name)}\s*=.*?tag\s*=\s*\")([^\"]+)(\")(.+)$")
    changed = False
    new_lines: list[str] = []
    for line in prod_pyproject.read_text(encoding="utf-8").splitlines():
        m = pattern.match(line)
        if m:
            old_tag = m.group(2)
            if old_tag != tag_name:
                changed = True
                line = f"{m.group(1)}{tag_name}{m.group(3)}{m.group(4)}"
        new_lines.append(line)

    if changed and not dry_run:
        prod_pyproject.write_text("\n".join(new_lines) + "\n", encoding="utf-8")

    return changed


def bump_package(pkg_path: pathlib.Path, cfg: dict, bump_part: str, dry_run: bool = False) -> None:
    root = pathlib.Path.cwd()
    changes_dir = root / cfg.get("changes_output_dir", "release_tool/changes") / pkg_path.name
    tag_msg_file = changes_dir / cfg["tag_message_filename"]
    if not tag_msg_file.exists():
        print(f"[stage4]   {pkg_path.name}: —Ñ–∞–π–ª tag-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    raw_tag_message = tag_msg_file.read_text(encoding="utf-8").strip()
    if not raw_tag_message:
        print(f"[stage4]   {pkg_path.name}: –ø—É—Å—Ç–æ–µ tag-—Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    pyproject = pkg_path / "pyproject.toml"
    if not pyproject.exists():
        print(f"[stage4]   {pkg_path.name}: pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    current_version = None
    project_name = None
    for line in pyproject.read_text(encoding="utf-8").splitlines():
        stripped = line.strip()
        if stripped.startswith("version") and "=" in stripped:
            current_version = line.split("=", 1)[1].strip().strip("\"'")
            break
        if stripped.startswith("name") and "=" in stripped and project_name is None:
            project_name = stripped.split("=", 1)[1].strip().strip("\"'")
    if current_version is None:
        print(f"[stage4]   {pkg_path.name}: –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ pyproject.toml")
        return
    if project_name is None:
        project_name = pkg_path.name.replace("_", "-")  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

    new_version = bump_version(current_version, bump_part)

    if dry_run:
        print(f"[stage4]   [dry-run] {pkg_path.name}: {current_version} -> {new_version}")
    else:
        print(f"[stage4]   üì¶ {pkg_path.name}: {current_version} -> {new_version}")
        update_version_in_pyproject(pyproject, new_version)

    # –£–¥–∞–ª—è–µ–º workspace-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–æ–≥–æ —Ç–µ–≥–∞
    _clean_workspace_sources(pyproject, dry_run=dry_run)

    # add -A
    if dry_run:
        print(f"[stage4]   [dry-run] git -C {pkg_path} add -A")
    else:
        proc = _run_git(pkg_path, ["add", "-A"], capture=False)
        if proc.returncode != 0:
            raise GitError(proc.stderr)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–ª–∏–∑
    prev_tag = get_last_tag(pkg_path)
    prev_version: str | None = None
    if prev_tag:
        prefix = cfg.get("tag_prefix", "")
        if prefix and prev_tag.startswith(prefix):
            prev_version = prev_tag[len(prefix) :]
        else:
            prev_version = prev_tag

    tag_message = (
        raw_tag_message.replace("{VERSION}", new_version)
        .replace("{PREV_VERSION}", prev_version or "")
        .strip()
    )

    tag_name = f"{cfg['tag_prefix']}{new_version}"
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ¬´—á–∏—Å—Ç—ã–π¬ª –∫–æ–º–º–∏—Ç: bump + —É–¥–∞–ª–µ–Ω–∏–µ workspace
    commit_and_tag(
        pkg_path,
        tag_message,
        tag_name,
        remote=cfg.get("git_remote", "origin"),
        push=False,
        dry_run=dry_run,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HEAD –¥–æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    orig_head = _run_git(pkg_path, ["rev-parse", "HEAD"], capture=True).stdout.strip()

    if not dry_run:
        # --------------------------------------------------
        # Post-release: –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π dev-—Ü–∏–∫–ª –ø—Ä—è–º–æ –≤ —Ç–æ–π –∂–µ –≤–µ—Ç–∫–µ
        #   * –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ (patch/minor/major) ‚Äî X.Y.(Z+1).dev0
        #   * –¥–ª—è dev-—Ä–µ–ª–∏–∑–æ–≤ bump –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        # --------------------------------------------------

        next_dev: str | None = None
        if bump_part != "dev":
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pyproject –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ (—Å workspace-—Å—Å—ã–ª–∫–∞–º–∏)
            _run_git(
                pkg_path,
                ["checkout", orig_head, "--", str(pyproject.relative_to(pkg_path))],
                capture=False,
            )

            next_dev = _next_dev_version(new_version)
            update_version_in_pyproject(pyproject, next_dev)
            _run_git(pkg_path, ["add", str(pyproject.relative_to(pkg_path))], capture=False)
            _run_git(
                pkg_path,
                [
                    "commit",
                    "-m",
                    f"chore: start {next_dev} development",
                ],
                capture=False,
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º prod/pyproject.toml
        prod_py_path = root / cfg.get("prod_pyproject_path", "prod/pyproject.toml")
        if _update_tag_in_prod_pyproject(prod_py_path, project_name, tag_name, dry_run=dry_run):
            print(f"[stage4]   üìù prod/pyproject.toml: –æ–±–Ω–æ–≤–ª—ë–Ω —Ç–µ–≥ –¥–ª—è {project_name} ‚Üí {tag_name}")

        if next_dev is not None:
            print(f"[stage4]   ‚úÖ {pkg_path.name}: –≤–µ—Ä—Å–∏—è {new_version} –≤—ã–ø—É—â–µ–Ω–∞; –Ω–∞—á–∞—Ç dev-—Ü–∏–∫–ª {next_dev}")
        else:
            print(f"[stage4]   ‚úÖ {pkg_path.name}: –≤–µ—Ä—Å–∏—è {new_version} –≤—ã–ø—É—â–µ–Ω–∞")


def push_package(pkg_path: pathlib.Path, cfg: dict, dry_run: bool = False) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–∏—Ç—ã –∏ —Ç–µ–≥–∏ –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."""

    remote = cfg.get("git_remote", "origin")
    if dry_run:
        print(f"[stage4]   [dry-run] git -C {pkg_path} push {remote}")
        print(f"[stage4]   [dry-run] git -C {pkg_path} push {remote} --tags")
        return

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ç–∫—É (fast-forward –¥–æ dev-–∫–æ–º–º–∏—Ç–∞), –∑–∞—Ç–µ–º —Ç–µ–≥–∏
    for cmd in [["push", remote], ["push", remote, "--tags"]]:
        proc = _run_git(pkg_path, cmd, capture=False)
        if proc.returncode != 0:
            raise GitError(proc.stderr or f"git {' '.join(cmd)} failed in {pkg_path}")

    print(f"[stage4]   ‚úÖ {pkg_path.name}: –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


def run(argv: list[str] | None = None) -> None:
    cfg = load_config()
    parser = argparse.ArgumentParser(description="Stage 4: bump –≤–µ—Ä—Å–∏–∏ –∏/–∏–ª–∏ push –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    parser.add_argument("--bump", choices=["patch", "minor", "major", "dev"], help="–ö–∞–∫—É—é —á–∞—Å—Ç—å –≤–µ—Ä—Å–∏–∏ —É–≤–µ–ª–∏—á–∏—Ç—å")
    parser.add_argument("--push", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑—ã –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args(argv)

    do_bump = args.bump is not None
    do_push = args.push

    if not (do_bump or do_push):
        parser.error("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã --bump –∏–ª–∏ --push")

    if do_bump and do_push:
        print(f"[stage4] –í—ã–ø–æ–ª–Ω—è–µ–º bump –≤–µ—Ä—Å–∏–π ({args.bump}) —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º push...")
    elif do_bump:
        print(f"[stage4] –í—ã–ø–æ–ª–Ω—è–µ–º bump –≤–µ—Ä—Å–∏–π ({args.bump}) –±–µ–∑ push...")
    else:  # —Ç–æ–ª—å–∫–æ push
        print(f"[stage4] –í—ã–ø–æ–ª–Ω—è–µ–º push –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π...")
    
    root = pathlib.Path.cwd()
    packages_dir = root / cfg["packages_dir"]
    if not packages_dir.is_dir():
        print(f"[stage4] –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {packages_dir}", file=sys.stderr)
        sys.exit(1)

    processed = 0
    for pkg in sorted(packages_dir.iterdir()):
        if not pkg.is_dir():
            continue

        # –ö–∞—Ç–∞–ª–æ–≥ changes/<pkg>/ –∏ —Ñ–∞–π–ª tag_message –Ω—É–∂–Ω—ã –∏ –¥–ª—è bump, –∏ –¥–ª—è push
        changes_dir = root / cfg.get("changes_output_dir", "release_tool/changes") / pkg.name
        tag_msg_file = changes_dir / cfg["tag_message_filename"]
        if not tag_msg_file.exists() or not tag_msg_file.read_text(encoding="utf-8").strip():
            continue

        print(f"[stage4] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç: {pkg.name}")
        # –°–Ω–∞—á–∞–ª–∞ bump (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è), –∑–∞—Ç–µ–º push (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if do_bump:
            bump_package(pkg, cfg, bump_part=args.bump, dry_run=args.dry_run or cfg.get("dry_run", False))
        if do_push:
            push_package(pkg, cfg, dry_run=args.dry_run or cfg.get("dry_run", False))
        processed += 1
    
    if processed == 0:
        print("[stage4] ‚úÖ –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print(f"[stage4] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {processed}")


def _next_dev_version(release_version: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ dev-—Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ *release_version*.

    ‚Ä¢ –ï—Å–ª–∏ *release_version* ‚Äî **stable** (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ .devN) ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch-—á–∞—Å—Ç—å –Ω–∞ +1 –∏
      –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å ``.dev0`` (``0.1.2`` ‚Üí ``0.1.3.dev0``).
    ‚Ä¢ –ï—Å–ª–∏ *release_version* —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ``.devN`` ‚Üí –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º ``N``
      (``0.1.2.dev3`` ‚Üí ``0.1.2.dev4``).
    """

    try:
        v = Version(release_version)
    except InvalidVersion as exc:  # pragma: no cover
        raise ValueError(f"Invalid release version: {release_version}") from exc

    # –ï—Å–ª–∏ —É–∂–µ dev-—Ä–µ–ª–∏–∑ ‚Äî –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º dev-–Ω–æ–º–µ—Ä
    if v.dev is not None:
        return bump_dev(release_version)

    # Stable release: bump patch
    release = list(v.release) + [0, 0]
    major, minor, patch = release[:3]
    patch += 1
    return f"{major}.{minor}.{patch}.dev0"


if __name__ == "__main__":
    run() 