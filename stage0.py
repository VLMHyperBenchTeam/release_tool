from __future__ import annotations

"""Stage 0: –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç dev-–≤–µ—Ç–∫–∏ –≤ –ø–∞–∫–µ—Ç–∞—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–ª–∏–∑–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.

–ó–∞–ø—É—Å–∫:
    uv run release-tool-stage0 [--branch dev_branch] [--base-branch main] [--push] [--dry-run]

–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞–∫–µ—Ç—É (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π):
1. `git fetch <remote>` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é origin).
2. `git checkout -B <branch> <remote>/<base_branch>` ‚Äî —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º dev-–≤–µ—Ç–∫—É
   –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π <base_branch>.
3. (–æ–ø—Ü.) `git push --set-upstream <remote> <branch>` ‚Äî –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω --push.

–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω—å—à–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ Stage 2/3/4.
"""

import argparse
import pathlib
import sys

from .config import load_config
from .git_utils import _run_git, _push_repo


def _process_package(pkg: pathlib.Path, branch: str, base: str, remote: str, push: bool, dry_run: bool) -> None:
    if dry_run:
        print(f"[stage0]   [dry-run] git -C {pkg} fetch {remote}")
        print(f"[stage0]   [dry-run] git -C {pkg} checkout -B {branch} {remote}/{base}")
        if push:
            print(f"[stage0]   [dry-run] git -C {pkg} push --set-upstream {remote} {branch}")
        return

    _run_git(pkg, ["fetch", remote], capture=False)
    # checkout / recreate branch from remote base
    proc = _run_git(pkg, ["checkout", "-B", branch, f"{remote}/{base}"], capture=False)
    if proc.returncode != 0:
        # fallback: if remote branch missing, create from local base
        _run_git(pkg, ["checkout", "-B", branch, base], capture=False)

    if push:
        _push_repo(pkg, remote)
        print(f"[stage0]   üöÄ –≤–µ—Ç–∫–∞ {branch} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    print(f"[stage0]   ‚úÖ {pkg.name}: –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –≤–µ—Ç–∫–∞ {branch} (–æ—Ç {base})")


def run(argv: list[str] | None = None) -> None:
    cfg = load_config()
    parser = argparse.ArgumentParser(description="Stage 0: prepare dev branches from base branch")
    parser.add_argument("--branch", default="dev_branch", help="–ò–º—è dev-–≤–µ—Ç–∫–∏")
    parser.add_argument("--base-branch", default="main", help="–ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞—ë—Ç—Å—è dev-–≤–µ—Ç–∫–∞")
    parser.add_argument("--push", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ç–∫—É –≤ origin –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args(argv)

    root = pathlib.Path.cwd()
    packages_dir = root / cfg["packages_dir"]
    if not packages_dir.is_dir():
        print(f"[stage0] –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {packages_dir}", file=sys.stderr)
        sys.exit(1)

    remote_name = cfg.get("git_remote", "origin")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–∞–∫ Stage5/6)
    changes_root = root / cfg.get("changes_output_dir", "release_tool/changes")

    processed = 0
    for pkg in sorted(packages_dir.iterdir()):
        if not pkg.is_dir():
            continue
        if not (changes_root / pkg.name).exists():
            # –ø–∞–∫–µ—Ç –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–ª–∏–∑–µ
            continue
        print(f"[stage0] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç: {pkg.name}")
        _process_package(pkg, args.branch, args.base_branch, remote_name, args.push, dry_run=args.dry_run or cfg.get("dry_run", False))
        processed += 1

    print(f"[stage0] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {processed}")


if __name__ == "__main__":
    run() 