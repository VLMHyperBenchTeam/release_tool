"""
Stage 3: —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –∏/–∏–ª–∏ diff –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ) —Ç–µ–≥–∞.

–°–æ–∑–¥–∞—ë—Ç `<changes_since_tag_filename>` –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞.

–ó–∞–ø—É—Å–∫:
    uv run release-tool-stage3 [--tag TAG_NAME] [--dry-run]
    # –∏–ª–∏
    uv run python -m release_tool.stage3 [--tag TAG_NAME] [--dry-run]
"""
from __future__ import annotations

import argparse
import pathlib
import sys

from .config import load_config
from .git_utils import (
    get_last_tag,
    get_log_since_tag,
    has_changes_since_last_tag,
    get_diff_since_tag,
    _run_git,
)


def _build_changes_text(
    commits_log: str,
    diff_text: str | None,
) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –ï—Å–ª–∏ *diff_text* –Ω–µ *None*, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–µ–∫—Ü–∏—è —Å diff.
    """

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ diff –±–µ–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤.
    if diff_text:
        return diff_text + "\n"
    return ""


def process_package(
    pkg_path: pathlib.Path,
    cfg: dict,
    dry_run: bool = False,
    include_diff: bool = False,
    from_tag: str | None = None,
) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if from_tag:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        proc = _run_git(pkg_path, ["rev-parse", "--verify", from_tag], capture=True)
        if proc.returncode != 0:
            print(f"[stage3]   {pkg_path.name}: —Ç–µ–≥ '{from_tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        tag_to_use = from_tag
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        tag_to_use = get_last_tag(pkg_path)
        if not has_changes_since_last_tag(pkg_path):
            print(f"[stage3]   {pkg_path.name}: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞")
            return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–≥ –∫–æ–º–º–∏—Ç–æ–≤ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ diff
    diff_txt = get_diff_since_tag(pkg_path, tag_to_use)
    log = ""

    if not log and not diff_txt:
        print(f"[stage3]   {pkg_path.name}: –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏")
        return

    root = pathlib.Path.cwd()
    out_dir = root / cfg.get("changes_output_dir", "release_tool/changes") / pkg_path.name
    out_dir.mkdir(parents=True, exist_ok=True)
    changes_file = out_dir / cfg["changes_since_tag_filename"]
    if dry_run:
        print(f"[dry-run] would write changes to {changes_file}")
        preview = _build_changes_text(log, diff_txt)
        print(preview)
        return

    changes_file.write_text(_build_changes_text(log, diff_txt), encoding="utf-8")
    print(f"[stage3]   ‚úÖ {pkg_path.name}: –∫–æ–º–º–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {changes_file.relative_to(pathlib.Path.cwd())}")

    # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è tag-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ
    tag_msg_file = out_dir / cfg["tag_message_filename"]
    if not tag_msg_file.exists():
        template = (
            "## –†–µ–ª–∏–∑ {VERSION}\n\n"
            "_–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å {PREV_VERSION}_\n\n"
            "<!-- –û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å -->\n"
        )
        if not dry_run:
            tag_msg_file.write_text(template, encoding="utf-8")
        print(
            f"[stage3]   üìù {pkg_path.name}: —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {tag_msg_file.relative_to(pathlib.Path.cwd())} —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ {{VERSION}}, {{PREV_VERSION}}"
        )


def run(argv: list[str] | None = None) -> None:
    cfg = load_config()
    parser = argparse.ArgumentParser(description="Stage 3: git log since last tag")
    parser.add_argument("--tag", type=str, help="—Å–æ–±—Ä–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥)")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args(argv)

    print("[stage3] –ü–æ–∏—Å–∫ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞...")
    
    root = pathlib.Path.cwd()
    packages_dir = root / cfg["packages_dir"]
    if not packages_dir.is_dir():
        print(f"[stage3] –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {packages_dir}", file=sys.stderr)
        sys.exit(1)

    print(f"[stage3] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–∞–ª–æ–≥: {packages_dir}")
    
    processed = 0
    for pkg in sorted(packages_dir.iterdir()):
        if not pkg.is_dir():
            continue
        print(f"[stage3] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç: {pkg.name}")
        process_package(
            pkg,
            cfg,
            dry_run=args.dry_run or cfg.get("dry_run", False),
            include_diff=True,
            from_tag=args.tag,
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª
        changes_file = (pathlib.Path.cwd() / cfg.get("changes_output_dir", "release_tool/changes") / pkg.name / cfg["changes_since_tag_filename"])
        if changes_file.exists():
            processed += 1
    
    if processed == 0:
        print("[stage3] ‚úÖ –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–º–∏—Ç–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞")
    else:
        print(f"[stage3] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {processed}")
        print(f"[stage3] –§–∞–π–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {cfg.get('changes_output_dir', 'release_tool/changes')}")


if __name__ == "__main__":
    run() 